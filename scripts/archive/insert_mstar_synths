#!/usr/bin/env python
# ==============================================================================
# insert_mstar_synths
#
# Inserts MSTAR synthetics image metadata into the database
# ==============================================================================
# Standard imports
import os
import sys
import glob
import argparse

# External dependencies
from pymongo import MongoClient

# Local imports
from utils.argutils import valid_path


CLASSES = ['T72', 'BMP2', 'BTR70']
DEFAULT_DB_NAME = 'mstar'
DEFAULT_COLLECTION_NAME = 'targets'
FILE_EXTENSIONS = ['*.jpg', '*.png']

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('srcdir', type=valid_path,
        help="""Path to directory containing synthetic images""")
    parser.add_argument('targetclass', choices=CLASSES, type=str,
        help="""Target class to associated with images""")
    parser.add_argument('--dbname', type=str,
        default=DEFAULT_DB_NAME,
        help="""Name of database to use""")
    parser.add_argument('--collection', type=str,
        default=DEFAULT_COLLECTION_NAME,
        help="""Name of collection to use""")
    return parser

def get_collection(args):
    client = MongoClient()
    if args.dbname not in client.database_names():
        raise RuntimeError("database %s does not exist" % args.dbname)
    db = client[args.dbname]
    if args.collection not in db.collection_names():
        raise RuntimeError("collection %s does not exist" % args.dbname)
    collection = db[args.collection]
    print("using database %s" % args.dbname)
    print("using collection %s" % args.collection)
    return collection
    

def main(args):
    coll = get_collection(args)
    images = []
    for ext in FILE_EXTENSIONS:
        images.extend(glob.glob(os.path.join(args.srcdir, ext)))
    docs = []
    for img in images:
        d = {}
        d['filename'] = img
        d['target_class'] = args.targetclass
        d['label'] = 'train'
        d['target_instance'] = 'synth'
        docs.append(d)
    coll.insert(docs)
    return

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    main(args)
    sys.exit(0)
    
