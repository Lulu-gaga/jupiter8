#!/usr/bin/env python
"""Analyze GAN training statistics
"""
# Standard imports
import os
import argparse
import logging
import json
import yaml

# External dependenices
import pandas as pd
import matplotlib.pyplot as plt

# Constants/defaults
CONFIG_FILE = 'config.yaml'
RESULTS_LOG_FILE = 'training_results.log'

# Shared logger
log = logging.getLogger(__name__)


def valid_path(p):
    p = os.path.expandvars(p)
    if not os.path.exists(p):
        raise ValueError("%s does not exist" % p)
    return p


def get_parser():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('resultsdir', type=valid_path,
        help="""Directory to walk looking for training results""")
    #
    # miscellaneous options
    #
    parser.add_argument('--debug', action='store_true',
        help="""Turn on debugging""")
    return parser


def main(args):
    all_results = []
    dirnames = os.listdir(args.resultsdir)
    print(dirnames)
    for dirname in dirnames:
        dirpath = os.path.join(args.resultsdir, dirname)
        if not os.path.isdir(dirpath): continue
        # Parse config file
        configfn = os.path.join(dirpath, CONFIG_FILE)
        if not os.path.exists(configfn):
            log.debug("No config file %s in %s" % (CONFIG_FILE, dirpath))
        with open(configfn, 'r') as f:
            config = yaml.load(f)
        # Parse log file
        logfn = os.path.join(dirpath, RESULTS_LOG_FILE)
        if not os.path.exists(logfn):
            log.debug("No log file %s in %s" % (RESULTS_LOG_FILE, dirpath))
        with open(logfn, 'r') as f:
            results = json.load(f)
        log.debug("%d entries in log" % len(results))
        # update results entries with target name
        for r in results:
            r['target'] = config['target']
        all_results.extend(results)

    df = pd.DataFrame(all_results)
    grouped = df.groupby('target')
    fig, ax = plt.subplots()
    for name, group in grouped:
        subsampled = group[::20]
        subsampled.plot('epoch', 'd_accuracy', ax=ax, label=name)
    plt.show()


if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    # Configure logging
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    main(args)
    exit(0)

        






























