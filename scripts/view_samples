#!/usr/bin/env python
# Local imports
import os
import sys
import logging
import argparse

# External dependencies
import pymongo
import pandas as pd
import matplotlib.pyplot as plt

# Local imports
from utils.argutils import valid_path

DEFAULT_DATABASE = 'mstar'
DEFAULT_TARGETS_COLLECTION = 'targets'
DEFAULT_NUM_SAMPLES = 5
TARGET_LABELS = ['test', 'train']
TARGET_CLASSES = ['T72', 'BTR70', 'BMP2']

client = pymongo.MongoClient()
db = client[DEFAULT_DATABASE]

log = logging.getLogger(__name__)


def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('outdir', type=valid_path,
        help="""output directory for sample images""")
    parser.add_argument('label', choices=TARGET_LABELS,
        help="""sample label to filter on""")
    parser.add_argument('--num-samples', type=int, dest='num_samples',
        default=DEFAULT_NUM_SAMPLES,
        help="""number of samples to display per class""")
    parser.add_argument('--synths', action='store_true',
        help="""show synthesized samples""")
    return parser

def load_targets(args):
    col = db[DEFAULT_TARGETS_COLLECTION]
    cursor = col.find()
    df = pd.DataFrame(list(cursor))
    if args.synths:
        df = df[df.target_instance == 'synth']
    else:
        df = df[df.target_instance != 'synth']
    return df

def main(args):
    df = load_targets(args)
    
    # Get random sample of images for each class
    images = {}
    for klass in TARGET_CLASSES:
        samples = df[df.target_class == klass].sample(args.num_samples)
        filenames = list(samples.filename)
        images[klass] = [plt.imread(fn) for fn in filenames]

    rows = len(TARGET_CLASSES)
    cols = args.num_samples

    fig, axes = plt.subplots(rows, cols)
    for i in xrange(rows):
        for j in xrange(cols):
            klass = TARGET_CLASSES[i]    
            img = images[klass][j]
            ax = axes[i, j]
            ax.axis('off')
            ax.set_title("%s (%d)" % (klass, j))
            ax.imshow(img, cmap='gray')
    output_file = 'samples'
    if args.synths:
        output_file += '_synth'
    output_file += '.png'
    plt.savefig(os.path.join(args.outdir, output_file))
    return

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    parser = get_parser()
    args = parser.parse_args()
    try:
        ret_code = main(args)
    except Exception as err:
        log.error(err, exc_info=True)
        ret_code = 1
    finally:
        sys.exit(ret_code)
