#!/usr/bin/env python
# Local imports
import os
import logging
import argparse
from math import sqrt

# External dependencies
import pymongo
import pandas as pd
import matplotlib.pyplot as plt

# Local imports
from utils.argutils import valid_path

DEFAULT_DATABASE = 'mstar2'
TARGET_COLLECTION = 'targets'
SYNTH_COLLECTION = 'synthetics'
NUM_SAMPLES = 9
DEP_ANGLE_TEST = '15_DEG'
DEP_ANGLE_TRAIN = '15_DEG'
TARGETS = [
    "BTR_60",
    "2S1",
    "BRDM_2",
    "D7",
    "T62",
    "ZIL131",
    "ZSU_23_4",
    "BMP2",
    "BTR70",
    "T72"
]


client = pymongo.MongoClient()
db = client[DEFAULT_DATABASE]

log = logging.getLogger(__name__)


def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--outdir', type=valid_path,
        default='.',
        help="""output directory for sample images""")
    parser.add_argument('label', choices=TARGETS,
        help="""sample label to filter on""")
    parser.add_argument('--show-training', action='store_true', dest='show_training',
        help="""If viewing real samples, show samples from the training set. 
            Otherwise show samples from the test set""")
    #parser.add_argument('--num-samples', type=int, dest='num_samples',
    #    default=DEFAULT_NUM_SAMPLES,
    #    help="""number of samples to display per class""")
    parser.add_argument('--synths', action='store_true',
        help="""show synthesized samples""")
    parser.add_argument('--samples-trained-with', choices=[25, 50, 100, 101],
        type=int,
        dest='samples_trained_with',
        help="""number of samples the GAN model was trained with (choose 101 for
            model trained with all available samples""")
    return parser

def load_targets(args):
    if args.synths:
        query = {'num_samples_trained_with': args.samples_trained_with}
        cursor = db[SYNTH_COLLECTION].find(query)
        df = pd.DataFrame(list(cursor))
    else:
        query = {'target_class': args.label}
        if args.show_training: query['depression_angle'] = DEP_ANGLE_TRAIN
        else: query['depression_angle'] = DEP_ANGLE_TEST
        cursor = db[TARGET_COLLECTION].find(query)
        df = pd.DataFrame(list(cursor))
    return df

def main(args):
    df = load_targets(args)
    
    # Get random sample of images for each class
    images = {}
    filenames = list(df.filename.sample(NUM_SAMPLES))
    images = [plt.imread(fn) for fn in filenames]

    rows = int(sqrt(NUM_SAMPLES))
    cols = rows
    fig, axes = plt.subplots(rows, cols)
    idx = 0
    for i in xrange(rows):
        for j in xrange(cols):
            img = images[idx]
            fn = filenames[idx]
            idx +=1
            ax = axes[i, j]
            ax.axis('off')
            ax.set_title("%s" % os.path.basename(fn), fontsize=8)
            ax.imshow(img, cmap='gray')
    plt.show()
#    output_file = 'samples'
#    if args.synths:
#        output_file += '_synth'
#    output_file += '.png'
#    plt.savefig(os.path.join(args.outdir, output_file))
    return

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    parser = get_parser()
    args = parser.parse_args()
    main(args)
    exit(0)
