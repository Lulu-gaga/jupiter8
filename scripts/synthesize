#!/usr/bin/env python
import os
import sys
import argparse

# External dependencies
import numpy as np
import matplotlib.pyplot as plt
from keras.models import model_from_json

# Local imports
sys.path.append(os.path.expandvars("$JUPITER8_HOME/python"))
from dcgan.dcgan import build_generator

LATENT_DIM = 100
T72_MODEL = "/projects/jupiter8/T72/gen_unbuilt_model.json"
T72_WEIGHTS = "/projects/jupiter8/T72/generator_weights.h5"
BMP2_MODEL = "/projects/jupiter8/BMP2/gen_unbuilt_model.json"
BMP2_WEIGHTS = "/projects/jupiter8/BMP2/generator_weights.h5"
BTR70_MODEL = "/projects/jupiter8/BTR70/gen_unbuilt_model.json"
BTR70_WEIGHTS = "/projects/jupiter8/BTR70/generator_weights.h5"
TARGETS = {'T72': (T72_MODEL, T72_WEIGHTS),
           'BMP2': (BMP2_MODEL, BMP2_WEIGHTS),
           'BTR70': (BTR70_MODEL, BTR70_WEIGHTS)}

def valid_path(path):
    p = os.path.expandvars(path)
    if not os.path.exists(p):
        raise ValueError("%s does not exist" % p)
    return p

def valid_target(target):
    t = target.upper()
    if t not in TARGETS.keys():
        raise ValueError("%s is not a valid target" % t)
    return t

def get_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('target', type=valid_target, help="""target class""")
    parser.add_argument('qty', type=int,
        help="""quantity of images to synthesize""")
    parser.add_argument('outdir', type=valid_path,
        help="""directory to write images to""")
    return parser

def main(args):
    model, weights = TARGETS[args.target]
    with open(model, 'r') as f:
        generator = model_from_json(f.read())
    generator = build_generator(generator, LATENT_DIM)
    generator.load_weights(weights)

    noise = np.random.normal(0, 1, (args.qty, LATENT_DIM))
    gen_imgs = generator.predict(noise)
    
    # Rescale images 0 - 1
    gen_imgs = 0.5 * gen_imgs + 0.5

    for i in range(args.qty):
        name = '%s_synth_%d.png' % (args.target, i)
        fname = os.path.join(args.outdir, name)
        img = gen_imgs[i,:,:,0]
        plt.imsave(fname, img, cmap='gray')

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    main(args)
    sys.exit(0)
