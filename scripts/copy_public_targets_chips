#!/usr/bin/env python
# Standard imports
import os
import logging
import argparse
import traceback
import shutil

# External dependencies
from pymongo import MongoClient

# Local imports
from mstar2jpeg import convert_image_target
from mstar2jpeg import convert_image_clutter

FILE_PREFIX = 'HB0'
VALID_TARGETS = ['BMP2', 'BTR70', 'T72']

DATABASE = 'mstar2'
COLLECTION = 'targets'

log = logging.getLogger(__name__)

def get_db():
    client = MongoClient()
    db = client[DATABASE]
    return db

def process_images(indir, outdir):
    documents = []
    for dirpath, dirnames, filenames in os.walk(indir):
        basedir = os.path.basename(dirpath)
        if basedir.endswith('_DEG'):
            dep_angle = basedir # depression angle
            continue
        if basedir in VALID_TARGETS:
            log.debug("found target directory: %s" % dirpath)
            klass= basedir
            continue
        if basedir.startswith('SN_'):
            instance = basedir
            for f in filenames:
                if not f.startswith(FILE_PREFIX): continue
                new_path = os.path.join(args.outdir, f)
                try:
                    shutil.copy(os.path.join(dirpath, f), new_path)
                except:
                    log.error("failed to convert %s" % fname, exc_info=True)
                    continue
                else:
                    doc = {'filename': new_path, 'depression_angle': dep_angle,
                           'instance':instance, 'target_class': klass}
                    documents.append(doc)
    return documents

def insert_metadata(collection, documents):
    db = get_db()
    coll = db[collection]
    num_inserted = 0
    for doc in documents:
        result = coll.insert(doc)
        if result: num_inserted +=1
    log.info("inserted %d of %d documents into database" % (num_inserted, len(documents)))
    return

def get_parser():
    usage = "Command line script to convert a directory of MSTAR image files to JPEG and insert metadata into DB"
    parser = argparse.ArgumentParser(usage=usage)
    parser.add_argument('indir', type=str, help="image directory to walk")
    parser.add_argument('outdir', type=str, help="directory to copy images to")
    parser.add_argument('--database', type=str, default=DATABASE,
        help="""Name of database housing metadata""")
    parser.add_argument('--collection', type=str, default=COLLECTION,
        help="""Name of database Collection housing metadata""")
    parser.add_argument('--debug', action='store_true',
        help="""Set logging to debug (otherwise info)""")
    return parser

def main(args):
    if not os.path.exists(args.indir):
        raise ValueError("%s does not exist" % args.indir)
    if not os.path.exists(args.outdir):
        raise ValueError("%s does not exist" % args.outdir)
    log.info("Searching directory %s" % args.indir)
    log.info("Database: %s, Collection: %s" % (args.database, args.collection))
    documents = process_images(args.indir, args.outdir)
    if not documents:
        log.warn("No images found in %d or its subdirectories" % args.indir)
    else:
        log.info("Found %d total images" % len(documents))
    log.info("Inserting metadata")
    insert_metadata(args.collection, documents)
    return

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    try:
        main(args)
    except KeyboardInterrupt:
        print("Exiting due to Keyboard Interrupt")
        exit(0)
    except Exception as err:
        print("Exiting with error: %s" % err)
        traceback.format_exc()
        exit(1)
    else:
        exit(0)
