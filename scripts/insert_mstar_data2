#!/usr/bin/env python
"""Insert data from the MSTAR Public Mixed Targets CDs into a data warehouse
"""
# Standard imports
import os
import sys
import argparse
import logging
from pymongo import MongoClient

# Local imports

VALID_TARGETS = ['D7', 'T62', '2S1', 'BRDM-2', 'ZSU_23-4', 'SLICY']
FILE_EXTENSION = '.JPG'
DATABASE = 'mstar'
COLLECTION = 'targets'

log = logging.getLogger(__name__)

def get_db():
    client = MongoClient()
    db = client.mstar
    return db

def find_images(directory):
    documents = []
    for dirpath, dirnames, filenames in os.walk(directory):
        basedir = os.path.basename(dirpath)
        if basedir.endswith('_DEG'):
            dep_angle = basedir # depression angle
            continue
        if basedir.startswith('COL'):
            collection = basedir
            continue
        if basedir.stratswith('SCENE'):
            scene = basedir
            continue
        if basedir in VALID_TARGETS:
            log.debug("found target directory: %s" % dirpath)
            klass= basedir
            for f in filenames:
                if not f.endswith(FILE_EXTENSION): continue
                full_name = os.path.join(dirpath, f)
                doc = {'filename': full_name, 'depression_angle': dep_angle,
                       'collection': collection, 'scene': scene,
                       'target_class': klass}
                documents.append(doc)
    return documents

def insert_metadata(db, collection, documents):
    client = MongoClient()
    db = client.db
    coll = db.collection
    num_inserted = 0
    for doc in documents:
        _id = coll.insert(doc)
        if _id: num_inserted +=1
    log.debug("inserted %d of %d documents into database") % (num_inserted, len(documents))
    return

def get_parser():
    usage = "Command line script to walk MSTAR Public Mixed image directory and insert metadata into DB"
    parser = argparse.ArgumentParser(usage=usage,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('dir', type=str, help="image directory to walk")
    parser.add_argument('--database', type=str, default=DATABASE,
        help="""Name of database housing metadata""")
    parser.add_argument('--collection', type=str, default=COLLECTION,
        help="""Name of database cOllection housing metadata""")
    return parser

def main(args):
    if not os.path.exists(args.dir):
        raise RuntimeError("%s does not exist" % args.dir)
    log.info("Database: %s, Collection: %s" % (args.database. args.collection))
    log.info("Searching directory %s" % args.dir)
    documents = find_images(args.dir)
    if not documents:
        log.warn("No images found in %d or its subdirectories" % args.dir)
    else:
        log.debug("Found %d total images" % len(documents))
    log.info("Inserting metadata")
    #insert_metadata(args.database, args.collection, documents)
    print(documents[:5])
    return


if __name__ == '__main__':
    parser = get_parser()
    logging.basicConfig(level=10)
    args = parser.parse_args()
    try:
        main(args)
    except KeyboardInterrupt:
        print("exiting due to Keyboard Interrupt")
        exit(0)
    except Exception as err:
        print("exiting with error: %s" % err)
        exit(1)
    else:
        exit(0)
    
