#!/usr/bin/env python
"""Insert data from the MSTAR Public Mixed Targets CDs into a data warehouse
"""
# Standard imports
import os
import shutil
import sys
import argparse
import logging
import traceback
from pymongo import MongoClient

# Local imports

VALID_TARGETS = ['D7', 'T62', '2S1', 'BRDM_2', 'ZIL131', 'ZSU_23_4', 'SLICY']
FILE_EXTENSIONS = ['.jpg', '.JPG']
DATABASE = 'mstar2'
COLLECTION = 'targets'

log = logging.getLogger(__name__)

def get_db():
    client = MongoClient()
    db = client[DATABASE]
    return db

def process_images(indir, outdir):
    num_files_found = 0
    num_files_copied = 0
    documents = []
    for dirpath, dirnames, filenames in os.walk(indir):
        basedir = os.path.basename(dirpath)
        if basedir.endswith('_DEG'):
            dep_angle = basedir # depression angle
            continue
        if basedir.startswith('COL'):
            collection = basedir
            continue
        if basedir.startswith('SCENE'):
            scene = basedir
            continue
        if basedir in VALID_TARGETS:
            log.debug("found target directory: %s" % dirpath)
            klass= basedir
            # Copy JPG files
            for f in filenames:
                # Check if file is a JPEG
                if os.path.splitext(f)[1] not in FILE_EXTENSIONS: continue
                num_files_found +=1
                # Prepend class name to filename
                new_f = '_'.join((klass, f))
                # Reformat extension if 'JPG'
                prefix, ext = os.path.splitext(new_f)
                if ext == '.JPG':
                    new_f = '.'.join((prefix, 'jpg'))
                new_path = os.path.join(outdir, new_f)
                try:
                    shutil.copy(os.path.join(dirpath,f), new_path)
                except Exception as err:
                    log.error(err)
                    continue
                else:
                    num_files_copied +=1
                    doc = {'filename': new_path, 'depression_angle': dep_angle,
                           'collection': collection, 'scene': scene,
                           'target_class': klass}
                    documents.append(doc)
    log.info("Copied %d of %d files found" % (num_files_copied, num_files_found))
    return documents

def insert_metadata(collection, documents):
    db = get_db()
    coll = db[collection]
    num_inserted = 0
    for doc in documents:
        result = coll.insert(doc)
        if result: num_inserted +=1
    log.info("inserted %d of %d documents into database" % (num_inserted, len(documents)))
    return

def get_parser():
    usage = "Command line script to walk MSTAR Public Mixed image directory, copy images to a common destination directory, and insert metadata into DB"
    parser = argparse.ArgumentParser(usage=usage,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('indir', type=str, help="image directory to walk")
    parser.add_argument('outdir', type=str, help="directory to copy images to")
    parser.add_argument('--database', type=str, default=DATABASE,
        help="""Name of database housing metadata""")
    parser.add_argument('--collection', type=str, default=COLLECTION,
        help="""Name of database Collection housing metadata""")
    parser.add_argument('--debug', action='store_true',
        help="""Set logging to debug (otherwise info)""")
    return parser

def main(args):
    if not os.path.exists(args.indir):
        raise ValueError("%s does not exist" % args.indir)
    if not os.path.exists(args.outdir):
        raise ValueError("%s does not exist" % args.outdir)
    log.info("Searching directory %s" % args.indir)
    log.info("Database: %s, Collection: %s" % (args.database, args.collection))
    documents = process_images(args.indir, args.outdir)
    if not documents:
        log.warn("No images found in %d or its subdirectories" % args.indir)
    else:
        log.info("Found %d total images" % len(documents))
    log.info("Inserting metadata")
    insert_metadata(args.collection, documents)
    return

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    try:
        main(args)
    except KeyboardInterrupt:
        print("exiting due to Keyboard Interrupt")
        exit(0)
    except Exception as err:
        print("exiting with error: %s" % err)
        print(traceback.format_exc())
        exit(1)
    else:
        exit(0)
